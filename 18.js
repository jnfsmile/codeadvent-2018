let utInput1 = parseInput(`.|.
.|.
.|.`);
assert(utInput1.get("0,0").val === ".");
assert(utInput1.get("1,1").val === "|");
assert(utInput1.get("2,2").val === ".");
assert(utInput1.get("0,0").right === utInput1.get("1,0"));
let ut1 = (map => transform(map, 3))(utInput1);
assert(ut1.get("0,0").val === ".");
assert(ut1.get("1,1").val === "|");
assert(ut1.get("2,2").val === ".");
assert(ut1.get("0,1").val === "|");
assert(ut1.get("2,1").val === "|");

let utInput2 = parseInput(`.||
|..
.||`);
let ut2 = (map => transform(map, 3))(utInput2);
assert(ut2.get("0,0").val === ".");
assert(ut2.get("1,1").val === "|");
assert(ut2.get("2,1").val === "|");
assert(ut2.get("2,2").val === "|");

let utInput3 = parseInput(`|||
##.
#|#`);
let ut3 = (map => transform(map, 3))(utInput3);
assert(ut3.get("1,0").val === "|");
assert(ut3.get("2,1").val === "|");
assert(ut3.get("2,2").val === "#");
assert(ut3.get("0,1").val === "#");
assert(ut3.get("1,2").val === "#");

let utInput4 = parseInput(`.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.`);
let ut4 = (map => transform(map))(utInput4);
assert(ut4.get("1,0").val === ".");
assert(ut4.get("2,2").val === ".");
assert(ut4.get("0,1").val === ".");
assert(ut4.get("1,2").val === "|");
assert(ut4.get("3,3").val === "#");
let ut5 = (map => {
  let m = map;
  for (let i = 0; i < 9; i++) m = transform(map);
  return m;
})(ut4);
let ut6 = ((map, type) => count(map, type))(ut5, "|");
assert(ut6 === 37);
let ut7 = ((map, type) => count(map, type))(ut5, "#");
assert(ut7 === 31);

function count(map, type) {
  let sum = 0;
  for (acre of map.values()) {
    if (acre.val === type) sum++;
  }
  return sum;
}

function parseInput(scan) {
  let map = new Map();
  let scan2 = scan.split("\n");
  const len = scan2.length;
  scan2.forEach((line, iy) => {
    let mapLine = [];
    let lineArr = line.split("").map((acre, ix) => {
      return { val: acre, pos: { x: ix, y: iy } };
    });
    lineArr.forEach((acre, i) => {
      if (i < len - 1) acre.right = lineArr[i + 1];
      if (i > 0) acre.left = lineArr[i - 1];
      if (iy > 0) {
        const myUp = map.get(i + "," + (iy - 1));
        acre.up = myUp;
        myUp.down = acre;

        if (i < len - 1) {
          const myUpRight = map.get(i + 1 + "," + (iy - 1));
          acre.upRight = myUpRight;
          myUpRight.downLeft = acre;
        }

        if (i > 0) {
          const myUpLeft = map.get(i - 1 + "," + (iy - 1));
          acre.upLeft = myUpLeft;
          myUpLeft.downRight = acre;
        }
      }
      map.set(i + "," + iy, acre);
    });
  });
  return map;
}

function transform(map) {
  const changes = new Map();
  for (let [pos, acre] of map) {
    let nbrs =
      ((acre.upLeft && acre.upLeft.val) || "") +
      ((acre.up && acre.up.val) || "") +
      ((acre.upRight && acre.upRight.val) || "") +
      ((acre.right && acre.right.val) || "") +
      ((acre.downRight && acre.downRight.val) || "") +
      ((acre.down && acre.down.val) || "") +
      ((acre.downLeft && acre.downLeft.val) || "") +
      ((acre.left && acre.left.val) || "");
    switch (acre.val) {
      case ".":
        nbrs = nbrs.split("|").length - 1;
        if (nbrs >= 3) changes.set(pos, "|");
        break;
      case "|":
        nbrs = nbrs.split("#").length - 1;
        if (nbrs >= 3) changes.set(pos, "#");
        break;
      case "#":
        nbrs = [nbrs.split("|").length - 1, nbrs.split("#").length - 1];
        if (nbrs[0] === 0 || nbrs[1] === 0) changes.set(pos, ".");
        break;
    }
  }
  for (let [pos, val] of changes) {
    map.get(pos).val = val;
  }
  return map;
}

function print(map, active = false) {
  let p = [];
  for (let [pos, acre] of map) {
    let x = acre.pos.x;
    let y = acre.pos.y;
    if (!p[y]) p[y] = [];
    p[y][x] = acre.val;
  }
  const pr = p.map(o => o.join("")).join("\n");
  if (active) console.log(pr);
  return pr;
}

const input = parseInput(`.#|||.|...|....#|..##|....||.|..#..##.|..#........
...|##..#.||||..||.#.|..#.|.|.....#|.|.|.....|...|
#.....#.##|#..||##..|.......||.|..##|...|..|#...#|
#|.|.#.|.#..||..#...#...##|...|.....|##......#....
..###.......||..#....|..|..#.|##..##.##..|.......#
.#.|#|.|.|.......|.......|#....#...#.|..###.#...||
##|..|...#.|.##|....#.##.....|....|....|||#.|#.#..
.#.|.....#|..|..|....|##.#.||.##...|.|....#|...|.#
#|....#....|..|....|..|..#|..#|....#..#.....#.|..|
|....|#|.#.|.....|.|#|..#..#..#.|##....#.|......##
|...#......|..#....##..#.#..#.|..#....||.#.#.#.|.|
..|..|#||#|#|#|...|........#.|..|#.#.##..|..||.|.#
.||#.#...#.......|#...|#.|..#|..|..#........||#..|
.||.#||#......#.#......|..........|.|..#.|.|.....|
|.#.#|||##|...|..#.#.#|.||......#|#|#.........|.|.
......#.....|...|...#.#..#..#.##.#..##|...|.#|....
#|#.|.#|.#|.||.#.||.......|||.||.#...|.##|.|.#...#
|||.#..|....##..#|||.|.|#|.#.|.#.#.||##...|##.#...
...|.|..|....|..#.||#|...#|.|#|.#|..####.#.##.|.#.
|.#|||.##.#.|###|.......#....|..#..||#|...#...#.#.
#.#.....##|#.#..|.#|.|...|#|....|#..#..|..|.....|#
..|..||#...|#.|..#...#.|.|.|#|.|..###|#.||#..#|.|.
#..###.|.#||.###|...#.|..|.|.....#||..#.|#.....|#.
#..#..||..#....|||.#..|...|...........#..####||##.
..#|#.|..|.#|.||.#.#||.|......||#.#..|...###||#..#
||.#....#........|#||.#..|.|....|#.##.....||##|..|
|.#|##..#|...||.........|..#....#.|#..|#|..|#.|...
|....#|.||.#|.#||#|..#..|..#..|....|.....|.#....#.
...##|.....................|...#.#..|.#|..#.##.|..
#...|...|..|...#|...|...#.........#|#|||#||..|.|#.
#|......||.|#....###|..##|.#..#.#.#.##||....|.....
...|.#..||...#.#.....#|...#...#|#.|.|##|#......|#.
....|||..#||#|||...|..##.|##.|.|.|.#.#.....###.#|.
#.|..#..##..#||..###|#.#.#...#..|.|#.|..#.....#.|.
|..|.|.#|#|...###..|...#|..#...|.||#.#|#....|.||.|
..###|#.#.#.##...#.|#.....#..|...|##.||..##...#|#|
|..|#|#..#.....|#...|...||......#...#..#|......#|.
####....|#...|.#..|....|.#....|#.|.##|..||...#....
#.#..#.#.|.|....#..#|.|...|.|.||....|#..#..|..||..
#..#.|.#..|#.|.....#..#|..#.|..|.|..|.#......###|.
..|#|...||.|.#..|..#...###....||||....||..##.##.|#
|...#...|#........#....#..#.#......||.#.........|.
..........|#...|#####.|.||||#....#...#....|.|#|..#
....|..|#.|.#.............|.#||.||..|.|...||#....|
..||........#........#|#...|..#.#..|.#..#.|#...#.|
...#..|##.##|#.|#.|.#.#...#.#..#...|......#|.....#
.|.|..|.|....#|....##.#.|....#|........#|.||.##..|
.....||...|.|...|..|#.|###.#.#.#|..#|..........#.|
.#..|#|#..#.#..#.#........#..#...#..#.#..##..#|.|#
....|.|.#.#|..|.#.|.|#.|#..#|..|..#.....|#|.#....#`);

let res = (map => {
  let m = map;
  for (let i = 0; i < 10; i++) m = transform(map);
  return m;
})(input);
let w = count(res, "|");
let l = count(res, "#");
console.log(l * w);

/*******
 * part 2
 */

const input2 = parseInput(`.#|||.|...|....#|..##|....||.|..#..##.|..#........
...|##..#.||||..||.#.|..#.|.|.....#|.|.|.....|...|
#.....#.##|#..||##..|.......||.|..##|...|..|#...#|
#|.|.#.|.#..||..#...#...##|...|.....|##......#....
..###.......||..#....|..|..#.|##..##.##..|.......#
.#.|#|.|.|.......|.......|#....#...#.|..###.#...||
##|..|...#.|.##|....#.##.....|....|....|||#.|#.#..
.#.|.....#|..|..|....|##.#.||.##...|.|....#|...|.#
#|....#....|..|....|..|..#|..#|....#..#.....#.|..|
|....|#|.#.|.....|.|#|..#..#..#.|##....#.|......##
|...#......|..#....##..#.#..#.|..#....||.#.#.#.|.|
..|..|#||#|#|#|...|........#.|..|#.#.##..|..||.|.#
.||#.#...#.......|#...|#.|..#|..|..#........||#..|
.||.#||#......#.#......|..........|.|..#.|.|.....|
|.#.#|||##|...|..#.#.#|.||......#|#|#.........|.|.
......#.....|...|...#.#..#..#.##.#..##|...|.#|....
#|#.|.#|.#|.||.#.||.......|||.||.#...|.##|.|.#...#
|||.#..|....##..#|||.|.|#|.#.|.#.#.||##...|##.#...
...|.|..|....|..#.||#|...#|.|#|.#|..####.#.##.|.#.
|.#|||.##.#.|###|.......#....|..#..||#|...#...#.#.
#.#.....##|#.#..|.#|.|...|#|....|#..#..|..|.....|#
..|..||#...|#.|..#...#.|.|.|#|.|..###|#.||#..#|.|.
#..###.|.#||.###|...#.|..|.|.....#||..#.|#.....|#.
#..#..||..#....|||.#..|...|...........#..####||##.
..#|#.|..|.#|.||.#.#||.|......||#.#..|...###||#..#
||.#....#........|#||.#..|.|....|#.##.....||##|..|
|.#|##..#|...||.........|..#....#.|#..|#|..|#.|...
|....#|.||.#|.#||#|..#..|..#..|....|.....|.#....#.
...##|.....................|...#.#..|.#|..#.##.|..
#...|...|..|...#|...|...#.........#|#|||#||..|.|#.
#|......||.|#....###|..##|.#..#.#.#.##||....|.....
...|.#..||...#.#.....#|...#...#|#.|.|##|#......|#.
....|||..#||#|||...|..##.|##.|.|.|.#.#.....###.#|.
#.|..#..##..#||..###|#.#.#...#..|.|#.|..#.....#.|.
|..|.|.#|#|...###..|...#|..#...|.||#.#|#....|.||.|
..###|#.#.#.##...#.|#.....#..|...|##.||..##...#|#|
|..|#|#..#.....|#...|...||......#...#..#|......#|.
####....|#...|.#..|....|.#....|#.|.##|..||...#....
#.#..#.#.|.|....#..#|.|...|.|.||....|#..#..|..||..
#..#.|.#..|#.|.....#..#|..#.|..|.|..|.#......###|.
..|#|...||.|.#..|..#...###....||||....||..##.##.|#
|...#...|#........#....#..#.#......||.#.........|.
..........|#...|#####.|.||||#....#...#....|.|#|..#
....|..|#.|.#.............|.#||.||..|.|...||#....|
..||........#........#|#...|..#.#..|.#..#.|#...#.|
...#..|##.##|#.|#.|.#.#...#.#..#...|......#|.....#
.|.|..|.|....#|....##.#.|....#|........#|.||.##..|
.....||...|.|...|..|#.|###.#.#.#|..#|..........#.|
.#..|#|#..#.#..#.#........#..#...#..#.#..##..#|.|#
....|.|.#.#|..|.#.|.|#.|#..#|..|..#.....|#|.#....#`);

let res2 = (map => {
  let m = map;
  let cache = new Map();
  let i = 0;
  let minutes = 1000000000;
  let foundCache = false;
  for (; i < minutes; i++) {
    m = transform(map);
    if (!foundCache) {
      if (cache.has(print(m))) {
        let prev = cache.get(print(m));
        let minStep = i - prev;
        if (minutes % minStep === cache.get(print(m) % minStep)) {
          break;
        }
        i = minutes - ((minutes % minStep) - (i % minStep))
        foundCache = true;
      } else {
        cache.set(print(m), i);
      }
    }
  }
  return m;
})(input2);
let w2 = count(res2, "|");
let l2 = count(res2, "#");
console.log(l2 * w2);
